[
    {
        "label": "textwrap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "textwrap",
        "description": "textwrap",
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 2,
        "importPath": "extrato",
        "description": "extrato",
        "peekOfCode": "def menu():\n    menu = \"\"\"\\n\n    ================ MENU ================\n    [pf]\\tConta Pessoa Física\n    [d]\\tDepositar\n    [s]\\tSacar\n    [e]\\tExtrato\n    [lc]\\tListar contas\n    [nu]\\tNovo usuário\n    [q]\\tSair",
        "detail": "extrato",
        "documentation": {}
    },
    {
        "label": "criar_conta_fisica",
        "kind": 2,
        "importPath": "extrato",
        "description": "extrato",
        "peekOfCode": "def criar_conta_fisica(agencia, numero_conta, usuarios):\n    cpf = input(\"Informe o CPF do usuário: \")\n    usuario = filtrar_usuario(cpf, usuarios)\n    if usuario:\n        print(\"\\n=== Conta criada com sucesso! ===\")\n        return {\"agencia\": agencia, \"numero_conta\": numero_conta, \"usuario\": usuario, \"dependentes\": []}\n    print(\"\\nUsuário não encontrado. Redirecionando para o cadastro de titular de pessoa física.\")\n    nome_completo = input(\"Informe o nome completo: \")\n    data_nascimento = input(\"Informe a data de nascimento (dd/mm/aaaa): \")\n    endereco = input(\"Informe o endereço completo: \")",
        "detail": "extrato",
        "documentation": {}
    },
    {
        "label": "criar_dependentes",
        "kind": 2,
        "importPath": "extrato",
        "description": "extrato",
        "peekOfCode": "def criar_dependentes(conta):\n    dependentes = []\n    while True:\n        opcao_dependente = input(\"\\nDeseja cadastrar um dependente? (s/n): \").lower()\n        if opcao_dependente != \"s\":\n            break\n        nome_completo = input(\"Informe o nome completo do dependente: \")\n        cpf_dependente = input(\"Informe o CPF do dependente: \")\n        data_nascimento_dependente = input(\"Informe a data de nascimento do dependente (dd/mm/aaaa): \")\n        endereco_dependente = input(\"Informe o endereço completo do dependente: \")",
        "detail": "extrato",
        "documentation": {}
    },
    {
        "label": "depositar",
        "kind": 2,
        "importPath": "extrato",
        "description": "extrato",
        "peekOfCode": "def depositar(saldo, valor, extrato, /):\n    if valor > 0:\n        saldo += valor\n        extrato += f\"Depósito:\\tR$ {valor:.2f}\\n\"\n        print(\"\\n=== Depósito realizado com sucesso! ===\")\n    else:\n        print(\"\\n@@@ Operação falhou! O valor informado é inválido. @@@\")\n    return saldo, extrato\ndef sacar(*, saldo, valor, extrato, limite, numero_saques, limite_saques):\n    excedeu_saldo = valor > saldo",
        "detail": "extrato",
        "documentation": {}
    },
    {
        "label": "sacar",
        "kind": 2,
        "importPath": "extrato",
        "description": "extrato",
        "peekOfCode": "def sacar(*, saldo, valor, extrato, limite, numero_saques, limite_saques):\n    excedeu_saldo = valor > saldo\n    excedeu_limite = valor > limite\n    excedeu_saques = numero_saques >= limite_saques\n    if excedeu_saldo:\n        print(\"\\n@@@ Operação falhou! Você não tem saldo suficiente. @@@\")\n    elif excedeu_limite:\n        print(\"\\n@@@ Operação falhou! O valor do saque excede o limite. @@@\")\n    elif excedeu_saques:\n        print(\"\\n@@@ Operação falhou! Número máximo de saques excedido. @@@\")",
        "detail": "extrato",
        "documentation": {}
    },
    {
        "label": "exibir_extrato",
        "kind": 2,
        "importPath": "extrato",
        "description": "extrato",
        "peekOfCode": "def exibir_extrato(saldo, /, *, extrato):\n    print(\"\\n================ EXTRATO ================\")\n    print(\"Não foram realizadas movimentações.\" if not extrato else extrato)\n    print(f\"\\nSaldo:\\t\\tR$ {saldo:.2f}\")\n    print(\"==========================================\")\ndef criar_usuario(usuarios):\n    cpf = input(\"Informe o CPF (somente número): \")\n    usuario = filtrar_usuario(cpf, usuarios)\n    if usuario:\n        print(\"\\n@@@ Já existe usuário com esse CPF! @@@\")",
        "detail": "extrato",
        "documentation": {}
    },
    {
        "label": "criar_usuario",
        "kind": 2,
        "importPath": "extrato",
        "description": "extrato",
        "peekOfCode": "def criar_usuario(usuarios):\n    cpf = input(\"Informe o CPF (somente número): \")\n    usuario = filtrar_usuario(cpf, usuarios)\n    if usuario:\n        print(\"\\n@@@ Já existe usuário com esse CPF! @@@\")\n        return\n    nome = input(\"Informe o nome completo: \")\n    data_nascimento = input(\"Informe a data de nascimento (dd-mm-aaaa): \")\n    endereco = input(\"Informe o endereço (logradouro, nro - bairro - cidade/sigla estado): \")\n    usuarios.append({\"nome\": nome, \"data_nascimento\": data_nascimento, \"cpf\": cpf, \"endereco\": endereco})",
        "detail": "extrato",
        "documentation": {}
    },
    {
        "label": "filtrar_usuario",
        "kind": 2,
        "importPath": "extrato",
        "description": "extrato",
        "peekOfCode": "def filtrar_usuario(cpf, usuarios):\n    usuarios_filtrados = [usuario for usuario in usuarios if usuario[\"cpf\"] == cpf]\n    return usuarios_filtrados[0] if usuarios_filtrados else None\ndef listar_contas(contas):\n    for conta in contas:\n        linha = f\"\"\"\\\n            Agência:\\t{conta['agencia']}\n            C/C:\\t\\t{conta['numero_conta']}\n            Titular:\\t{conta['usuario']['nome']}\n        \"\"\"",
        "detail": "extrato",
        "documentation": {}
    },
    {
        "label": "listar_contas",
        "kind": 2,
        "importPath": "extrato",
        "description": "extrato",
        "peekOfCode": "def listar_contas(contas):\n    for conta in contas:\n        linha = f\"\"\"\\\n            Agência:\\t{conta['agencia']}\n            C/C:\\t\\t{conta['numero_conta']}\n            Titular:\\t{conta['usuario']['nome']}\n        \"\"\"\n        print(\"=\" * 100)\n        print(textwrap.dedent(linha))\ndef main():",
        "detail": "extrato",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "extrato",
        "description": "extrato",
        "peekOfCode": "def main():\n    LIMITE_SAQUES = 3\n    AGENCIA = \"0001\"\n    saldo = 0\n    limite = 500\n    extrato = \"\"\n    numero_saques = 0\n    usuarios = []\n    contas = []\n    buscar_conta_por_id = []",
        "detail": "extrato",
        "documentation": {}
    }
]